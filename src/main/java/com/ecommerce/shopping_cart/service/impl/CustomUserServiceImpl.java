package com.ecommerce.shopping_cart.service.impl;

import com.ecommerce.shopping_cart.domain.USER_ROLE;
import com.ecommerce.shopping_cart.model.Seller;
import com.ecommerce.shopping_cart.model.User;
import com.ecommerce.shopping_cart.repository.SellerRepository;
import com.ecommerce.shopping_cart.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class CustomUserServiceImpl implements UserDetailsService {

    private final UserRepository userRepository;
    private static final String SELLER_PREFIX="seller_";
    private final SellerRepository sellerRepository;

    //Helps in removing the autogenerated password of spring security
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {

        if(username.startsWith(SELLER_PREFIX)){
            // if seller login

            String email=username.substring(SELLER_PREFIX.length());
            Seller seller = sellerRepository.findByEmail(email);
            System.out.println(seller);
            if(seller!=null){
                return buildUserDetails(seller.getEmail(),seller.getPassword(),USER_ROLE.ROLE_SELLER);
            }



        }else{
            User user = userRepository.findByEmail(username);
            if(user!=null){
                System.out.println("USER PASSWORD : "+user.getPassword());
                return buildUserDetails(user.getEmail(),user.getPassword(),user.getRole());
            }

        }



        throw new UsernameNotFoundException("User or Seller not found "+username);
    }

    private UserDetails buildUserDetails(String email, String password, USER_ROLE role) {
        if(role==null){
            role=USER_ROLE.ROLE_CUSTOMER;
        }
        List<GrantedAuthority> authorities=new ArrayList<>();
        authorities.add(new SimpleGrantedAuthority(role.toString()));
        return org.springframework.security.core.userdetails.User.withUsername(email).password(password).authorities(authorities).build();
    }
}
